/* Général */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    overflow-x: hidden; /* Évite les débordements horizontaux */
    overflow-y: auto;   /* Active le défilement vertical uniquement si nécessaire */
    
}


body {
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    background-image: url('images/fondbleu.png');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    
    
}
.fond-text{
    background-color: #1E3A5F !important;
    color: white; /* Le texte en blanc ressort bien sur un fond foncé */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Ombre douce pour un effet 3D */
}

h1 {
    font-family: 'Georgia', serif;
    font-size: 2.5em;
    font-weight: 700;
    color: #34495e;
    text-align: center;
    text-transform: capitalize;
    letter-spacing: 1px;
    position: relative;
    padding-bottom: 10px;
    margin: 30px 0;
    transition: color 0.3s ease, transform 0.3s ease;
  }
  
  h1::before {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: #ffcc00;
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }
  
  h1:hover {
    color: #ffcc00;
    transform: translateY(-4px);
  }
  
  h1:hover::before {
    transform: scaleX(1);
  }

  h2 {
    font-family: 'Merriweather', serif; /* Police de style journal */
    font-size: 2em;
    font-weight: 700;
    color: #34495e;
    text-align: center;
    text-transform: capitalize;
    letter-spacing: 1px;
    position: relative;
    padding-bottom: 8px;
    margin: 20px 0;
    transition: color 0.3s ease, transform 0.3s ease;
  }
  
  h2:hover {
    color: #ffcc00; /* Couleur changeante au survol */
    transform: scale(1.05); /* Légère agrandissement pour un effet de "zoom" */
  }
h3{
    color: #ffcc00;
}  
  
/* BANNER BIBLIOTHEQUE HEADER (228, 28, 61, 0.427)*/

header {
    background: linear-gradient(135deg, #003366, #1E3A5F);
}

.logo{
    margin-right: 15px;
}

.background-navbar{
    background-color:  #ffcc00c3;
   
}

#special-header {
    position: relative;
    height: 70vh;
    overflow: hidden;
}

#video-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 0;
}

/* NARBAR */
.navbar {
    height: auto;
}

.text-decoration-custom {
    text-decoration: underline;
    text-decoration-color: rgb(255, 255, 255);
}


.nav-brand-logo {
    font-size: 40px;
    font-family: "Special Elite", system-ui;
    font-weight: 400;
    font-style: normal;
}

.nav-item a {
    color: #083b7a;
}

.nav-item a:hover {
    color: #e4e9ed;
}

.nav-item {
    min-width: 12vw;
}

.nav-spacing {
    margin-left: 5px;
    margin-right: 5px;
}

.navbar-nav {
    font-family: "Noticia Text", serif;
    font-weight: 700;
    font-style: normal;
}

/* Personnalisation du bouton hamburger */
.navbar-toggler.custom-toggler {
    border-color: transparent; /* Supprime la bordure du bouton */
}

.navbar-toggler.custom-toggler .navbar-toggler-icon {
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba%28255, 255, 255, 1%29' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E");
    /* Change la couleur du hamburger en blanc */
}
/* FIN NARBAR */

/* BANNER VIDEO HEADER*/
#special-header {
    position: relative;
    height: 70vh;
    overflow: hidden;
}


#logo-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 2;
}

#logo-container img {
    max-width: 280px;
    max-height: auto;
}
/* FIN BANNER VIDEO*/ 
/* Media queries pour les appareils mobiles */
@media (max-width: 768px) {
    .navbar {
        height: auto;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .nav-brand {
        font-size: 28px;
        order: 1;
    }

    .navbar-brand {
        text-align: center;
    }

    .navbar-toggler {
        margin-bottom: 1rem;
        display: flex;
        justify-content: center;
        order: 2;
    }

    .navbar-collapse {
        order: 3;
    }


    .nav-item {
        min-width: auto;
        text-align: center;
    }

    .nav-spacing {
        margin-left: 0;
        margin-right: 0;
    }

    .navbar-nav {
        text-align: center;
        flex-direction: column;
        align-items: center;
    }

    #special-header {
        height: 25vh;
    }

    #logo-container img {
        max-width: 20vh;
        padding-top: 30px;
    }


    .nav-brand-logo {
        font-size: 25px;
        font-family: "Special Elite", system-ui;
        font-weight: 400;
        font-style: normal;
    }
}

/* FOOTER */

footer{
position:fixed;
bottom: 0;
width: 100%;
}

.container{
width: 100%;

}

.footer-cta .row {
    display: flex;
    flex-wrap: nowrap; /* Empêche le retour à la ligne */
    gap: 2rem; /* Espace entre chaque colonne */
}

.footer-cta .col {
    flex: 1;
    text-align: center;
    display: flex;
    align-items: center; /* Aligne les icônes et le texte verticalement */
    justify-content: center;
}

.footer-cta i {
    font-size: 1.5rem;
    color: #ffcc00;
    margin-right: 0.5rem;
    display: inline-block;
    vertical-align: middle; /* Assure que les icônes restent au même niveau */
}

.footer-cta span {
    font-size: 1rem;
    color: #d1d0d0;
    display: inline-block;
    vertical-align: middle; /* Assure que le texte reste aligné avec les icônes */
    line-height: 1.2; /* Ajuste l'espacement vertical si nécessaire */
}

.footer-section {
    background: linear-gradient(135deg, #003366, #1E3A5F);
    position: relative;
    text-align: center;
}

.footer-cta {
    border-bottom: 1px solid #373636;
}

.single-cta i {
    color: rgba(228, 28, 61, 0.427);
    font-size: 30px;
    float: left;
    margin-top: 8px;
}

.cta-text {
    padding-left: 15px;
    display: inline-block;
}

.cta-text h4 {
    color: #fff;
    font-size: 20px;
    font-weight: 600;
    margin-bottom: 2px;
}

.cta-text span {
    color: #fff;
    font-size: 15px;
}

.footer-content {
    display: flex;
    justify-content: space-between; /* Espacement entre les colonnes */
    align-items: flex-start; /* Aligne en haut */
}

.footer-pattern img {
    position: absolute;
    top: 0;
    left: 0;
    height: 330px;
    background-size: cover;
    background-position: 100% 100%;
}

.footer-logo {
    margin-bottom: 30px;
}

.footer-logo img {
    max-width: 200px;
}

.footer-text p {
    margin-bottom: 14px;
    font-size: 14px;
    color: #fff;
    line-height: 28px;
}

.footer-social-icon {
    display: flex; /* Pour aligner les icônes horizontalement */
    align-items: center; /* Pour centrer verticalement les icônes */
}

.footer-social-icon span {
    color: #fff;
    display: block;
    font-size: 20px;
    font-weight: 700;
    font-family: 'Poppins', sans-serif;
    margin-bottom: 20px;
}

.footer-social-icon a {
    color: #fff;
    font-size: 16px;
    margin-right: 15px;
    transition: none; /* Retire la transition pour éviter les changements de couleur au survol */
}

.footer-social-icon i {
    height: 40px;
    width: 40px;
    text-align: center;
    line-height: 38px;
    border-radius: 50%;
}


.footer-social-icon i {
    font-size: 2rem; /* Taille des icônes */
    margin-right: 8px; /* Moins d'espace entre les icônes */
    transition: transform 0.3s, color 0.3s;
}

.facebook-icon {
    color: #3b5998; /* Couleur de Facebook */
}

.instagram-icon {
    color: #e4405f; /* Couleur d'Instagram */
}

.footer-social-icon a:hover i {
    transform: scale(1.2);
}


/* Styles pour les titres des widgets */
.footer-widget-heading h3 {
    color: #fff;
    font-size: 20px;
    font-weight: 600;
    margin-bottom: 20px; /* Marge ajustée pour plus d'espace au-dessus des liens */
    position: relative;
}

.footer-widget-heading h3::before {
    content: "";
    position: absolute;
    left: 0;
    bottom: -15px;
    height: 2px;
    width: 50px;
    background: rgba(228, 28, 61, 0.427);
}

/* Styles pour les liens utiles */
.footer-links ul {
    padding: 0;
    list-style: none;
}

.footer-links ul li {
    margin-bottom: 10px;
}

.footer-links ul li a {
    color: #ffffff;
    text-decoration: none;
}

.footer-links ul li a:hover {
    text-decoration: underline;
}
.footer-links ul li {
    margin-bottom: 12px; /* Ajoute une marge inférieure pour séparer les éléments */
}

.footer-links ul li a {
    color: #fff;
    text-transform: capitalize;
}

.footer-links ul li a:hover {
    color: #ffffff;
}

/* Styles pour le formulaire de souscription */
.subscribe-form {
    position: relative;
    overflow: hidden;
}

.subscribe-form input {
    width: 100%;
    padding: 14px 28px;
    background: #2E2E2E;
    border: 1px solid #2E2E2E;
    color: #fff;
}

.subscribe-form button {
    position: absolute;
    right: 0;
    background:#ffcc00;
    padding: 13px 20px;
    top: 0;
}

.subscribe-form button i {
    color: #fff;
    font-size: 22px;
    transform: rotate(-6deg);
}

/* Styles pour la zone de copyright */
.copyright-area {
    background: #202020;
    padding: 40px 0;
    margin-bottom: -30px;
    padding-top: 10px;
    
}

.copyright-text p {
    font-size: 14px;
    color: #878787;
}

.copyright-text p a {
    color: beige;
}

/* Styles pour le menu du footer */
.footer-menu li {
    display: inline-block;
    margin-left: 20px;
}


.footer-menu li a {
    font-size: 14px;
    color: #878787;
}


.footer-widget {
    display: flex;
    flex-direction: column;
    align-items: center;
}
/* END FOOTER */

/* COOKIES */
#cookie-banner {
    display: none;
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background: linear-gradient(135deg, #003366, #1E3A5F);
    color: #fff;
    padding: 10px;
    text-align: center;

  }

  #cookie-banner p {
    margin: 0 0 10px;
  }

  #cookie-banner button {
    margin: 5px;
    cursor: pointer;
    background: #fff;
    color: #0b69dc;
    border: none;
    padding: 5px 10px;
    border-radius: 3px;
  }

  /* FIN COOKIES */

/* NOUVEAUTE CARD*/
.netflix-card {
    background-color: #141414;
    color: white;
    border: none;
    border-radius: 10px;
    width: 14rem; /* Taille réduite */
}
.netflix-card img {
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    height: 150px; /* Réduction de la hauteur de l'image */
    object-fit: cover;
}
.netflix-card .card-body {
    text-align: center;
    padding: 0.75rem; /* Réduction du padding */
}
.netflix-card .card-title {
    font-size: 1rem; /* Taille du titre réduite */
}
.netflix-card .card-text {
    font-size: 0.9rem; /* Taille du texte réduite */
}
.netflix-card .card-price {
    font-size: 1rem;
    font-weight: bold;
    color: #e50914;
}

/* Style pour le lien et le contenu du livre */
.book-cover {
    width: 100%;
    border-radius: 10px;
}
.book-details {
    text-align: center;
    padding: 10px;
    background-color: #1E3A5F;
    color: white; /* Le texte en blanc ressort bien sur un fond foncé */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Ombre douce pour un effet 3D */
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
}
/* FIN NOUVEAUTE CARD*/

/* lIVRES PROMO*/
.book-price del {
    color: #ffcc00; /* Mettre le prix barré en blanc */
    text-decoration: line-through; /* S'assurer que le texte est barré */
    margin-right: 10px; /* Espacement entre l'ancien prix et le nouveau prix */
}

.book-price .new-price {
    font-weight: bold; /* Mettre en gras le nouveau prix */
    color: #28a745; /* Couleur verte pour le prix promotionnel */
    font-size: 1.2em; /* Augmenter la taille du texte */
    animation: blink 3s infinite; /* Appliquer l'animation de clignotement plus lent */
}

/* Définition de l'animation de clignotement */
@keyframes blink {
    0% {
        opacity: 1;
    }
    50% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}
/*FIN LIVRES PROMO*/

/*CARD L*/
/* SQUELETTE CART XL*/
.book-card a:hover, /* Cible tous les liens dans les cartes au survol */
.book-card a {
    text-decoration: none; /* Désactive la décoration de texte (comme un soulignement) */
}
/* Cibler tous les liens dans les cartes, y compris au survol */
.card a,  /* Remplacez '.card' par toute autre classe de carte spécifique si nécessaire */
.card a:hover {
    text-decoration: none; /* Désactive le soulignement ou autres décorations */
}


  .book-carousel-container {
    position: relative;
    width: 100%;
    overflow: hidden;
    
}

.book-carousel {
    display: flex;
    transition: transform 0.3s ease;
}

.book-group {
    display: flex;
    gap: 15px;
    min-width: 100%;
    justify-content: flex-start;
}

.book-card {
    background-color: #222;
    border-radius: 8px;
    overflow: hidden;
    min-width: 200px;
    max-width: 200px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
}

.book-card:hover {
    transform: scale(1.05);
}

.book-cover {
    width: 100%;
    height: auto;
    max-height: 250px;
    object-fit: contain;
}

.book-details {
    padding: 15px;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.book-title {
    font-size: 20px;
    font-weight: bold;
    margin-bottom: 10px;
    color: #fff;
}

.book-author {
    font-size: 16px;
    font-weight: bold;
    color: #ffcc00;
    margin-bottom: 15px;
}

.book-description {
    font-size: 14px;
    color: #bbb;
    line-height: 1.5;
    margin-bottom: 5px;
}

.book-price {
    font-size: 16px;
    font-weight: bold;
    color: #ffcc00;
    margin-top: 15px;
}

.carousel-navigation {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 20px;
}

.carousel-navigation button {
    background-color: #ffcc00;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 16px;
    border-radius: 5px;
}

.carousel-navigation button:hover {
    background-color: #f39c12;
}

.book-group:nth-child(2) {
    display: none; /* Hide Group 2 initially */
}

/* Conteneur des cartes */
.xl-card-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    margin: 20px 0;
    flex-wrap: wrap;
  }
  
  /* Style de base des cartes */
  .xl-card {
    width: 200px;
    background-color: #1E3A5F;
    color: white; /* Le texte en blanc ressort bien sur un fond foncé */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Ombre douce pour un effet 3D */
    border: 1px solid #333; /* Bordure gris foncé */
    border-radius: 8px;
    box-shadow: 2px 2px 5px rgba(255, 255, 255, 0.2); /* Ombre légère blanche */
    display: flex;
    flex-direction: column;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease; /* Animation pour l'effet au survol */
  }
  
  /* Effet de mise en avant au survol de la carte */
  .xl-card:hover {
    transform: scale(1.05); /* Agrandissement de la carte de 5% */
    box-shadow: 4px 4px 15px rgba(255, 255, 255, 0.3); /* Ombre plus marquée */
    cursor: pointer; /* Change le curseur pour indiquer l'interactivité */
  }

  
  /* Style des images dans les cartes */
  .xl-card img {
    width: 100%;
    height: auto;
  }
  
  /* Contenu de la carte */
  .xl-card-content {
    padding: 10px;
    display: flex;
    flex-direction: column;
    gap: 8px;
    color: #fff; /* Texte blanc pour le contenu */
  }
  
  /* Titre du livre */
  .xl-card-title {
    font-size: 16px;
    font-weight: bold;
    color: #fff; /* Titre en blanc */
    text-align: center; /* Centre le titre */
  }
  
  /* Auteur du livre */
  .xl-card-author {
    font-size: 14px;
    color: #ccc; /* Auteur en gris clair */
    text-align: center; /* Centre l'auteur */
  }
  
  /* Description du livre */
  .xl-card-description {
    font-size: 12px;
    color: #eee; /* Description en blanc cassé */
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 3; /* Limite la description à 3 lignes */
    -webkit-box-orient: vertical;
    text-align: center; /* Centre la description */
  }
  
  /* Prix du livre */
  .xl-card-price {
    font-size: 16px;
    font-weight: bold;
    color: #ffcc00; /* Prix en jaune */
    margin-top: 10px;
    text-align: center; /* Centre le prix */
  }
  
  /* Cacher les groupes de cartes */
  .xl-hidden {
    display: none;
  }
  
  /* Style de la navigation entre les groupes de cartes */
  .xl-navigation {
    display: flex;
    justify-content: center;
    gap: 20px; /* Espacement entre les boutons */
    margin-top: 20px; /* Espace entre les boutons et les cartes */
  }
  
  /* Style des boutons de navigation */
  .xl-button {
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    border: none;
    border-radius: 5px;
    background-color: #ffcc00; /* Boutons jaunes */
    color: rgb(6, 6, 6);
  }
  
  .xl-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  
  /* Désactive le soulignement et le contour bleu des liens dans les cartes */
  .xl-card a, /* Cible tous les liens dans les cartes */
  .xl-card a:hover { /* Cible les liens dans les cartes au survol */
    text-decoration: none; /* Enlève le soulignement */
    outline: none; /* Enlève le contour bleu au focus */
    color: inherit; /* Hérite la couleur du texte du parent */
  }
  
  /* Cibler également les boutons au focus pour éviter le contour bleu */
  .xl-button:focus {
    outline: none; /* Enlève le contour bleu sur les boutons au focus */
  }
  
/*ZOOM CARTE NOUVEAUTE ET PROMO*/
/* Définir une transition douce pour la carte entière */
.card {
    transition: transform 0.3s ease; /* Transition pour l'effet de zoom */
    overflow: hidden; /* Empêche le contenu de dépasser la carte */
}

/* Appliquer le zoom sur la carte entière au survol */
.card:hover {
    transform: scale(1.05); /* Zoom à 5% */
}
/*FIN ZOOM CARTE NOUVEAUTE ET PROMO*/

/* Conteneur des cartes */
.xl-card-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    margin: 20px 0;
    flex-wrap: wrap;
  }
  
  /* Style de base des cartes */
  .xl-card {
    width: 200px;
    background-color: #1E3A5F;
    color: white; /* Le texte en blanc ressort bien sur un fond foncé */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Ombre douce pour un effet 3D */
    border: 1px solid #333; /* Bordure gris foncé */
    border-radius: 8px;
    box-shadow: 2px 2px 5px rgba(255, 255, 255, 0.2); /* Ombre légère blanche */
    display: flex;
    flex-direction: column;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease; /* Animation pour l'effet au survol */
  }
  
  /* Effet de mise en avant au survol de la carte */
  .xl-card:hover {
    transform: scale(1.05); /* Agrandissement de la carte de 5% */
    box-shadow: 4px 4px 15px rgba(255, 255, 255, 0.3); /* Ombre plus marquée */
    cursor: pointer; /* Change le curseur pour indiquer l'interactivité */
  }
  
  /* Style des images dans les cartes */
  .xl-card img {
    width: 100%;
    height: auto;
  }
  
  /* Contenu de la carte */
  .xl-card-content {
    padding: 10px;
    display: flex;
    flex-direction: column;
    gap: 8px;
    color: #fff; /* Texte blanc pour le contenu */
  }
  
  /* Titre du livre */
  .xl-card-title {
    font-size: 16px;
    font-weight: bold;
    color: #fff; /* Titre en blanc */
    text-align: center; /* Centre le titre */
  }
  
  /* Auteur du livre */
  .xl-card-author {
    font-size: 14px;
    color: #ccc; /* Auteur en gris clair */
    text-align: center; /* Centre l'auteur */
  }
  
  /* Description du livre */
  .xl-card-description {
    font-size: 12px;
    color: #eee; /* Description en blanc cassé */
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 3; /* Limite la description à 3 lignes */
    -webkit-box-orient: vertical;
    text-align: center; /* Centre la description */
  }
  
  /* Prix du livre */
  .xl-card-price {
    font-size: 16px;
    font-weight: bold;
    color: #ffcc00; /* Prix en jaune */
    margin-top: 10px;
    text-align: center; /* Centre le prix */
  }
  
  /* Cacher les groupes de cartes */
  .xl-hidden {
    display: none;
  }
  
  /* Style de la navigation entre les groupes de cartes */
  .xl-navigation {
    display: flex;
    justify-content: center;
    gap: 20px; /* Espacement entre les boutons */
    margin-top: 20px; /* Espace entre les boutons et les cartes */
  }
  
  /* Style des boutons de navigation */
  .xl-button {
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    border: none;
    border-radius: 5px;
    background-color: #ffcc00; /* Boutons jaunes */
    color: rgb(6, 6, 6);
  }
  
  .xl-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  
  /* Désactive le soulignement et le contour bleu des liens dans les cartes */
  .xl-card a, /* Cible tous les liens dans les cartes */
  .xl-card a:hover { /* Cible les liens dans les cartes au survol */
    text-decoration: none; /* Enlève le soulignement */
    outline: none; /* Enlève le contour bleu au focus */
    color: inherit; /* Hérite la couleur du texte du parent */
  }
  
  /* FIN SQUELETTE CARTE XL*/
  
/*CARD XL*/
/* SQUELETTE CART XL*/
.book-card a:hover, /* Cible tous les liens dans les cartes au survol */
.book-card a {
    text-decoration: none; /* Désactive la décoration de texte (comme un soulignement) */
}
/* Cibler tous les liens dans les cartes, y compris au survol */
.card a,  /* Remplacez '.card' par toute autre classe de carte spécifique si nécessaire */
.card a:hover {
    text-decoration: none; /* Désactive le soulignement ou autres décorations */
}


  .book-carousel-container {
    position: relative;
    width: 100%;
    overflow: hidden;
    
}

.book-carousel {
    display: flex;
    transition: transform 0.3s ease;
}

.book-group {
    display: flex;
    gap: 15px;
    min-width: 100%;
    justify-content: flex-start;
}

.book-card {
    background-color: #222;
    border-radius: 8px;
    overflow: hidden;
    min-width: 200px;
    max-width: 200px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
}

.book-card:hover {
    transform: scale(1.05);
}

.book-cover {
    width: 100%;
    height: auto;
    max-height: 250px;
    object-fit: contain;
}

.book-details {
    padding: 15px;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.book-title {
    font-size: 20px;
    font-weight: bold;
    margin-bottom: 10px;
    color: #fff;
}

.book-author {
    font-size: 16px;
    font-weight: bold;
    color: #ffcc00;
    margin-bottom: 15px;
}

.book-description {
    font-size: 14px;
    color: #bbb;
    line-height: 1.5;
    margin-bottom: 5px;
}

.book-price {
    font-size: 16px;
    font-weight: bold;
    color: #ffcc00;
    margin-top: 15px;
}

.carousel-navigation {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 20px;
}

.carousel-navigation button {
    background-color: #ffcc00;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 16px;
    border-radius: 5px;
}

.carousel-navigation button:hover {
    background-color: #f39c12;
}

.book-group:nth-child(2) {
    display: none; /* Hide Group 2 initially */
}
/* FIN SQUELETTE CARTE XL*/
/*FIN ZOOM CARTE NOUVEAUTE ET PROMO*/

var slider = tns({
    container: ".slider",
    items: 3,
    speed: 500,
    mouseDrag: true,
    autoplay: false,
    center: true,
    loop: false,
    nav: false,
    controlsContainer: "#custom-control",
    controlsPosition: "bottom",
  });
  
  // ScrollReveal JS
  
  ScrollReveal({ distance: "30px", easing: "ease-in" });
  
  ScrollReveal().reveal(".title", {
    delay: 300,
    origin: "top",
  });
  
  ScrollReveal().reveal(".paragraph", {
    delay: 800,
    origin: "top",
  });
  
  ScrollReveal().reveal("#form", {
    delay: 1200,
    origin: "bottom",
  });
  
  // Form
  
  const emailId = document.getElementById("email-id");
  const error = document.getElementById("error");
  const mailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
  
  //! get the cursor position in the input
  emailId.addEventListener("keyup", (e) => {
    console.log("Caret at: ", e.target.selectionStart);
  });
  
  //! show whether the email address is valid or not with an outline
  emailId.addEventListener("input", (e) => {
    const emailInputValue = e.currentTarget.value;
    if (
      /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/.test(emailInputValue) !=
      true
    ) {
      emailId.style.outline = "2px dotted rgb(117, 152, 242)";
    } else {
      emailId.style.outline = "2px dotted rgb(118, 167, 63)";
    }
  });
  
  //! if email address is empty, remove the outline from the input
  function checkEmpty() {
    if (emailId.value == "") {
      emailId.style.outline = "none";
    }
  }
  
  //! submit the email address
  form.addEventListener("submit", (e) => {
    if (emailId.value.match(mailRegex)) {
      e.preventDefault();
      form.innerHTML = `<p style="font-size: 2rem; font-weight: 500; color: rgb(118, 167, 63);">Subscribed! 🎉</p>`;
       // setTimeout("location.reload(true);", 2000);
      setTimeout(() => { 
        window.location.href = "#card-container";
  }, 1700);
    } else {
      e.preventDefault();
      alert("Oops! Please check your email");
    }
  });
  
  //! typing animation for the placeholder
  let i = 0;
  let placeholder = "";
  const txt = "example@domain.com";
  const speed = 150;
  
  setTimeout(() => {
    type();
  }, 1600);
  
  function type() {
    placeholder += txt.charAt(i);
    emailId.setAttribute("placeholder", placeholder);
    i++;
    setTimeout(type, speed);
  }
  
  // Vanilla-Tilt JS
  
  var VanillaTilt = (function () {
    "use strict";
  
    /**
     * Created by Sergiu Șandor (micku7zu) on 1/27/2017.
     * Original idea: https://github.com/gijsroge/tilt.js
     * MIT License.
     * Version 1.8.1
     */
  
    class VanillaTilt {
      constructor(element, settings = {}) {
        if (!(element instanceof Node)) {
          throw (
            "Can't initialize VanillaTilt because " + element + " is not a Node."
          );
        }
  
        this.width = null;
        this.height = null;
        this.clientWidth = null;
        this.clientHeight = null;
        this.left = null;
        this.top = null;
  
        // for Gyroscope sampling
        this.gammazero = null;
        this.betazero = null;
        this.lastgammazero = null;
        this.lastbetazero = null;
  
        this.transitionTimeout = null;
        this.updateCall = null;
        this.event = null;
  
        this.updateBind = this.update.bind(this);
        this.resetBind = this.reset.bind(this);
  
        this.element = element;
        this.settings = this.extendSettings(settings);
  
        this.reverse = this.settings.reverse ? -1 : 1;
        this.resetToStart = VanillaTilt.isSettingTrue(
          this.settings["reset-to-start"]
        );
        this.glare = VanillaTilt.isSettingTrue(this.settings.glare);
        this.glarePrerender = VanillaTilt.isSettingTrue(
          this.settings["glare-prerender"]
        );
        this.fullPageListening = VanillaTilt.isSettingTrue(
          this.settings["full-page-listening"]
        );
        this.gyroscope = VanillaTilt.isSettingTrue(this.settings.gyroscope);
        this.gyroscopeSamples = this.settings.gyroscopeSamples;
  
        this.elementListener = this.getElementListener();
  
        if (this.glare) {
          this.prepareGlare();
        }
  
        if (this.fullPageListening) {
          this.updateClientSize();
        }
  
        this.addEventListeners();
        this.reset();
  
        if (this.resetToStart === false) {
          this.settings.startX = 0;
          this.settings.startY = 0;
        }
      }
  
      static isSettingTrue(setting) {
        return setting === "" || setting === true || setting === 1;
      }
  
      /**
       * Method returns element what will be listen mouse events
       * @return {Node}
       */
      getElementListener() {
        if (this.fullPageListening) {
          return window.document;
        }
  
        if (typeof this.settings["mouse-event-element"] === "string") {
          const mouseEventElement = document.querySelector(
            this.settings["mouse-event-element"]
          );
  
          if (mouseEventElement) {
            return mouseEventElement;
          }
        }
  
        if (this.settings["mouse-event-element"] instanceof Node) {
          return this.settings["mouse-event-element"];
        }
  
        return this.element;
      }
  
      /**
       * Method set listen methods for this.elementListener
       * @return {Node}
       */
      addEventListeners() {
        this.onMouseEnterBind = this.onMouseEnter.bind(this);
        this.onMouseMoveBind = this.onMouseMove.bind(this);
        this.onMouseLeaveBind = this.onMouseLeave.bind(this);
        this.onWindowResizeBind = this.onWindowResize.bind(this);
        this.onDeviceOrientationBind = this.onDeviceOrientation.bind(this);
  
        this.elementListener.addEventListener(
          "mouseenter",
          this.onMouseEnterBind
        );
        this.elementListener.addEventListener(
          "mouseleave",
          this.onMouseLeaveBind
        );
        this.elementListener.addEventListener("mousemove", this.onMouseMoveBind);
  
        if (this.glare || this.fullPageListening) {
          window.addEventListener("resize", this.onWindowResizeBind);
        }
  
        if (this.gyroscope) {
          window.addEventListener(
            "deviceorientation",
            this.onDeviceOrientationBind
          );
        }
      }
  
      /**
       * Method remove event listeners from current this.elementListener
       */
      removeEventListeners() {
        this.elementListener.removeEventListener(
          "mouseenter",
          this.onMouseEnterBind
        );
        this.elementListener.removeEventListener(
          "mouseleave",
          this.onMouseLeaveBind
        );
        this.elementListener.removeEventListener(
          "mousemove",
          this.onMouseMoveBind
        );
  
        if (this.gyroscope) {
          window.removeEventListener(
            "deviceorientation",
            this.onDeviceOrientationBind
          );
        }
  
        if (this.glare || this.fullPageListening) {
          window.removeEventListener("resize", this.onWindowResizeBind);
        }
      }
  
      destroy() {
        clearTimeout(this.transitionTimeout);
        if (this.updateCall !== null) {
          cancelAnimationFrame(this.updateCall);
        }
  
        this.element.style.willChange = "";
        this.element.style.transition = "";
        this.element.style.transform = "";
        this.resetGlare();
  
        this.removeEventListeners();
        this.element.vanillaTilt = null;
        delete this.element.vanillaTilt;
  
        this.element = null;
      }
  
      onDeviceOrientation(event) {
        if (event.gamma === null || event.beta === null) {
          return;
        }
  
        this.updateElementPosition();
  
        if (this.gyroscopeSamples > 0) {
          this.lastgammazero = this.gammazero;
          this.lastbetazero = this.betazero;
  
          if (this.gammazero === null) {
            this.gammazero = event.gamma;
            this.betazero = event.beta;
          } else {
            this.gammazero = (event.gamma + this.lastgammazero) / 2;
            this.betazero = (event.beta + this.lastbetazero) / 2;
          }
  
          this.gyroscopeSamples -= 1;
        }
  
        const totalAngleX =
          this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX;
        const totalAngleY =
          this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY;
  
        const degreesPerPixelX = totalAngleX / this.width;
        const degreesPerPixelY = totalAngleY / this.height;
  
        const angleX =
          event.gamma - (this.settings.gyroscopeMinAngleX + this.gammazero);
        const angleY =
          event.beta - (this.settings.gyroscopeMinAngleY + this.betazero);
  
        const posX = angleX / degreesPerPixelX;
        const posY = angleY / degreesPerPixelY;
  
        if (this.updateCall !== null) {
          cancelAnimationFrame(this.updateCall);
        }
  
        this.event = {
          clientX: posX + this.left,
          clientY: posY + this.top,
        };
  
        this.updateCall = requestAnimationFrame(this.updateBind);
      }
  
      onMouseEnter() {
        this.updateElementPosition();
        this.element.style.willChange = "transform";
        this.setTransition();
      }
  
      onMouseMove(event) {
        if (this.updateCall !== null) {
          cancelAnimationFrame(this.updateCall);
        }
  
        this.event = event;
        this.updateCall = requestAnimationFrame(this.updateBind);
      }
  
      onMouseLeave() {
        this.setTransition();
  
        if (this.settings.reset) {
          requestAnimationFrame(this.resetBind);
        }
      }
  
      reset() {
        this.onMouseEnter();
  
        if (this.fullPageListening) {
          this.event = {
            clientX:
              ((this.settings.startX + this.settings.max) /
                (2 * this.settings.max)) *
              this.clientWidth,
            clientY:
              ((this.settings.startY + this.settings.max) /
                (2 * this.settings.max)) *
              this.clientHeight,
          };
        } else {
          this.event = {
            clientX:
              this.left +
              ((this.settings.startX + this.settings.max) /
                (2 * this.settings.max)) *
                this.width,
            clientY:
              this.top +
              ((this.settings.startY + this.settings.max) /
                (2 * this.settings.max)) *
                this.height,
          };
        }
  
        let backupScale = this.settings.scale;
        this.settings.scale = 1;
        this.update();
        this.settings.scale = backupScale;
        this.resetGlare();
      }
  
      resetGlare() {
        if (this.glare) {
          this.glareElement.style.transform =
            "rotate(180deg) translate(-50%, -50%)";
          this.glareElement.style.opacity = "0";
        }
      }
  
      getValues() {
        let x, y;
  
        if (this.fullPageListening) {
          x = this.event.clientX / this.clientWidth;
          y = this.event.clientY / this.clientHeight;
        } else {
          x = (this.event.clientX - this.left) / this.width;
          y = (this.event.clientY - this.top) / this.height;
        }
  
        x = Math.min(Math.max(x, 0), 1);
        y = Math.min(Math.max(y, 0), 1);
  
        let tiltX = (
          this.reverse *
          (this.settings.max - x * this.settings.max * 2)
        ).toFixed(2);
        let tiltY = (
          this.reverse *
          (y * this.settings.max * 2 - this.settings.max)
        ).toFixed(2);
        let angle =
          Math.atan2(
            this.event.clientX - (this.left + this.width / 2),
            -(this.event.clientY - (this.top + this.height / 2))
          ) *
          (180 / Math.PI);
  
        return {
          tiltX: tiltX,
          tiltY: tiltY,
          percentageX: x * 100,
          percentageY: y * 100,
          angle: angle,
        };
      }
  
      updateElementPosition() {
        let rect = this.element.getBoundingClientRect();
  
        this.width = this.element.offsetWidth;
        this.height = this.element.offsetHeight;
        this.left = rect.left;
        this.top = rect.top;
      }
  
      update() {
        let values = this.getValues();
  
        this.element.style.transform =
          "perspective(" +
          this.settings.perspective +
          "px) " +
          "rotateX(" +
          (this.settings.axis === "x" ? 0 : values.tiltY) +
          "deg) " +
          "rotateY(" +
          (this.settings.axis === "y" ? 0 : values.tiltX) +
          "deg) " +
          "scale3d(" +
          this.settings.scale +
          ", " +
          this.settings.scale +
          ", " +
          this.settings.scale +
          ")";
  
        if (this.glare) {
          this.glareElement.style.transform = `rotate(${values.angle}deg) translate(-50%, -50%)`;
          this.glareElement.style.opacity = `${
            (values.percentageY * this.settings["max-glare"]) / 100
          }`;
        }
  
        this.element.dispatchEvent(
          new CustomEvent("tiltChange", {
            detail: values,
          })
        );
  
        this.updateCall = null;
      }
  
      /**
       * Appends the glare element (if glarePrerender equals false)
       * and sets the default style
       */
      prepareGlare() {
        // If option pre-render is enabled we assume all html/css is present for an optimal glare effect.
        if (!this.glarePrerender) {
          // Create glare element
          const jsTiltGlare = document.createElement("div");
          jsTiltGlare.classList.add("js-tilt-glare");
  
          const jsTiltGlareInner = document.createElement("div");
          jsTiltGlareInner.classList.add("js-tilt-glare-inner");
  
          jsTiltGlare.appendChild(jsTiltGlareInner);
          this.element.appendChild(jsTiltGlare);
        }
  
        this.glareElementWrapper = this.element.querySelector(".js-tilt-glare");
        this.glareElement = this.element.querySelector(".js-tilt-glare-inner");
  
        if (this.glarePrerender) {
          return;
        }
  
        Object.assign(this.glareElementWrapper.style, {
          position: "absolute",
          top: "0",
          left: "0",
          width: "100%",
          height: "100%",
          overflow: "hidden",
          "pointer-events": "none",
          "border-radius": "inherit",
        });
  
        Object.assign(this.glareElement.style, {
          position: "absolute",
          top: "50%",
          left: "50%",
          "pointer-events": "none",
          "background-image": `linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)`,
          transform: "rotate(180deg) translate(-50%, -50%)",
          "transform-origin": "0% 0%",
          opacity: "0",
        });
  
        this.updateGlareSize();
      }
  
      updateGlareSize() {
        if (this.glare) {
          const glareSize =
            (this.element.offsetWidth > this.element.offsetHeight
              ? this.element.offsetWidth
              : this.element.offsetHeight) * 2;
  
          Object.assign(this.glareElement.style, {
            width: `${glareSize}px`,
            height: `${glareSize}px`,
          });
        }
      }
  
      updateClientSize() {
        this.clientWidth =
          window.innerWidth ||
          document.documentElement.clientWidth ||
          document.body.clientWidth;
  
        this.clientHeight =
          window.innerHeight ||
          document.documentElement.clientHeight ||
          document.body.clientHeight;
      }
  
      onWindowResize() {
        this.updateGlareSize();
        this.updateClientSize();
      }
  
      setTransition() {
        clearTimeout(this.transitionTimeout);
        this.element.style.transition =
          this.settings.speed + "ms " + this.settings.easing;
        if (this.glare)
          this.glareElement.style.transition = `opacity ${this.settings.speed}ms ${this.settings.easing}`;
  
        this.transitionTimeout = setTimeout(() => {
          this.element.style.transition = "";
          if (this.glare) {
            this.glareElement.style.transition = "";
          }
        }, this.settings.speed);
      }
  
      extendSettings(settings) {
        let defaultSettings = {
          reverse: false,
          max: 10,
          startX: 0,
          startY: 0,
          perspective: 1000,
          easing: "cubic-bezier(.03,.98,.52,.99)",
          scale: 1,
          speed: 300,
          transition: true,
          axis: null,
          glare: false,
          "max-glare": 1,
          "glare-prerender": false,
          "full-page-listening": false,
          "mouse-event-element": null,
          reset: true,
          "reset-to-start": true,
          gyroscope: true,
          gyroscopeMinAngleX: -45,
          gyroscopeMaxAngleX: 45,
          gyroscopeMinAngleY: -45,
          gyroscopeMaxAngleY: 45,
          gyroscopeSamples: 10,
        };
  
        let newSettings = {};
        for (var property in defaultSettings) {
          if (property in settings) {
            newSettings[property] = settings[property];
          } else if (this.element.hasAttribute("data-tilt-" + property)) {
            let attribute = this.element.getAttribute("data-tilt-" + property);
            try {
              newSettings[property] = JSON.parse(attribute);
            } catch (e) {
              newSettings[property] = attribute;
            }
          } else {
            newSettings[property] = defaultSettings[property];
          }
        }
  
        return newSettings;
      }
  
      static init(elements, settings) {
        if (elements instanceof Node) {
          elements = [elements];
        }
  
        if (elements instanceof NodeList) {
          elements = [].slice.call(elements);
        }
  
        if (!(elements instanceof Array)) {
          return;
        }
  
        elements.forEach((element) => {
          if (!("vanillaTilt" in element)) {
            element.vanillaTilt = new VanillaTilt(element, settings);
          }
        });
      }
    }
  
    if (typeof document !== "undefined") {
      /* expose the class to window */
      window.VanillaTilt = VanillaTilt;
  
      VanillaTilt.init(document.querySelectorAll("[data-tilt]"));
    }
  
    return VanillaTilt;
  })();
  <script>